#version 460 core

layout(binding = 0, rgba16f) uniform readonly image2D original_image;

layout(binding = 1, rgba16f) uniform writeonly image2D output_image;

#if defined(TARGET_OPENGL)
layout(binding = 2) uniform StepWidth {
  int value;
} step_width;

#elif defined(TARGET_VULKAN)
layout(push_constant) uniform StepWidth {
  int value;
} step_width;

#else
#error Unrecognized target

#endif  // TARGET_OPENGL || TARGET_VULKAN

layout(local_size_x = 16, local_size_y = 16) in;

void main() {
  const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
  const ivec2 image_size = imageSize(original_image);
  if (any(greaterThanEqual(coord, image_size))) {
    return;
  }

  float best_dist = 99999.0;
  vec2 best_coord = vec2(0.0, 0.0);
  for (int y = -1; y <= 1; ++y) {
    for (int x = -1; x <= 1; ++x) {
      const vec2 stored_coord =
          imageLoad(original_image, coord + ivec2(x, y) * step_width.value).xy;
      if (any(notEqual(stored_coord, vec2(0.0)))) {
        const float distance = length(image_size * stored_coord - coord);
        if (distance < best_dist) {
          best_dist = distance;
          best_coord = stored_coord;
        }
      }
    }
  }
  imageStore(output_image, coord, vec4(best_coord, 0.0, 0.0));
}
